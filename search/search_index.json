{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dingoPDM","text":"<p>dingoPDM and dingoPDM-Max are open source Infineon Profet based Power Distribution Modules. </p> <p></p> <p></p> <p></p> <p></p>"},{"location":"firmware/can/","title":"CAN","text":""},{"location":"firmware/can/#input","title":"Input","text":"<p>CAN input format is not restricted or defined by the firmware. </p> <p>The handling of CAN inputs is defined by the user using DingoConfigurator. </p> <p>Warning</p> <p>CAN messages must be received at least every 2 seconds or the input will be set to 0</p> <ul> <li>ID:<ul> <li>CAN ID of the message to evaluate </li> </ul> </li> <li>L Byte:<ul> <li>Low byte of the message to evaluate</li> <li>If only one byte, low byte = high byte</li> </ul> </li> <li>H Byte:<ul> <li>High byte of the message to evaluate</li> <li>If only one byte, set H Byte to 0</li> <li>Example, 16 bit number at byte 0-1:<ul> <li>L Byte = 0</li> <li>H Byte = 1</li> </ul> </li> <li>Only 2 bytes are ever used</li> </ul> </li> <li>Operator:<ul> <li>Mode <code>Num</code><ul> <li>Note: Always momentary</li> <li><code>Equal</code>:<ul> <li>Result = Byte value(s) == Mask</li> </ul> </li> <li><code>GreaterThan</code>:<ul> <li>Result = Byte value(s) &gt; Mask</li> </ul> </li> <li><code>LessThan</code><ul> <li>Result = Byte value(s) &lt; Mask</li> </ul> </li> <li><code>BitwiseAnd</code><ul> <li>Result = Byte value(s) &amp; Mask</li> </ul> </li> <li><code>BitwiseNand</code><ul> <li>Result = !(Byte value(s) &amp; Mask)</li> </ul> </li> </ul> </li> <li>Mode <code>Latching</code> or <code>Momentary</code><ul> <li><code>BitwiseAnd</code><ul> <li>Result = Byte value(s) &amp; Mask</li> </ul> </li> <li><code>BitwiseNand</code><ul> <li>Result = !(Byte value(s) &amp; Mask)</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"firmware/can/#input-examples","title":"Input Examples","text":"<ul> <li> <p>Blink Marine Button 1 (Message 405, byte 0, bit 0)</p> <ul> <li>ID = 405</li> <li>L Byte = 0</li> <li>H Byte = 0</li> <li>Operator = BitwiseAnd</li> <li>Mask = 1</li> <li>Mode = Latching or Momentary</li> </ul> </li> <li> <p>CANBoard Rotary Switch 4 at Position 2, Base ID 0x640 (Message 1602, byte 1 (high nibble))</p> <ul> <li>ID = 1600</li> <li>L Byte = 1</li> <li>H Byte = 1</li> <li>Operator = Equal</li> <li>Mask = 32 (2 &lt;&lt; 4)</li> <li>Mode = Num</li> </ul> </li> <li> <p>CANBoard Analog In 2 &gt; 500mV, Base ID 0x650 (Message 1616, byte 2-3)</p> <ul> <li>ID = 1616</li> <li>L Byte = 2</li> <li>H Byte = 3</li> <li>Operator = GreaterThan</li> <li>Mask = 500</li> <li>Mode = Num</li> </ul> </li> </ul>"},{"location":"firmware/can/#output","title":"Output","text":"<p>dingoPDM sends output, input and device information over CAN (and/or USB) cyclically. </p> <p>Note</p> <p>Default output transmit is every 50ms (20Hz)</p> <p>Warning</p> <p>The output format is under development and subject to change</p> CAN ID DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Base ID + 0 8 DI DS TC TC BV BV BT BT Base ID + 1 8 OC1 OC1 OC2 OC2 OC3 OC3 OC4 OC4 Base ID + 2 8 OC5 OC5 OC6 OC6 OC7 OC7 OC8 OC8 Base ID + 3 8 OS12 OS34 OS56 OS78 WO WSS FIO Base ID + 4 8 OR1 OR2 OR3 OR4 OR5 OR6 OR7 OR8 Base ID + 5 8 CI CI CI CI VI VI <ul> <li>Base ID + 0<ul> <li><code>DI</code> - Digital Inputs<ul> <li>Bit 0 - Input 1</li> <li>Bit 1 - Input 2</li> </ul> </li> <li><code>DS</code> - Device State<ul> <li>Device State<ul> <li>0 = <code>Power On</code></li> <li>1 = <code>Starting</code></li> <li>2 = <code>Run</code></li> <li>3 = <code>Sleep</code></li> <li>4 = <code>Wake Up</code></li> <li>5 = <code>Overtemp</code></li> <li>6 = <code>Error</code></li> </ul> </li> </ul> </li> <li><code>TC</code> - Total Current (Amps * 10)<ul> <li>2 bytes</li> </ul> </li> <li><code>BV</code> - Battery Voltage (V * 10)<ul> <li>2 bytes</li> </ul> </li> <li><code>BT</code> - Board Temperature (deg C * 10)<ul> <li>2 bytes</li> </ul> </li> </ul> </li> <li>Base ID + 1<ul> <li><code>OC1</code> to <code>OC4</code> - Output n Current (Amps * 10)<ul> <li>2 bytes each</li> </ul> </li> </ul> </li> <li>Base ID + 2<ul> <li><code>OC5</code> to <code>OC8</code> - Output n Current (Amps * 10)<ul> <li>2 bytes each</li> </ul> </li> </ul> </li> <li>Base ID + 3<ul> <li><code>OSxy</code> - Output States x/y<ul> <li>Bits 0 to 3 - State x</li> <li>Bits 4 to 8 - State y<ul> <li>0 = <code>Off</code></li> <li>1 = <code>On</code></li> <li>2 = <code>Overcurrent</code></li> <li>3 = <code>Fault</code></li> </ul> </li> </ul> </li> <li><code>WO</code> - Wiper Outputs<ul> <li>Bit 0 - Wiper Slow Speed Output</li> <li>Bit 1 - Wiper Fast Speed Output</li> </ul> </li> <li><code>WSS</code> - Wiper State and Speed<ul> <li>Bits 0 to 3 - Wiper Speed<ul> <li>0 = <code>Park</code></li> <li>1 = <code>Slow</code></li> <li>2 = <code>Fast</code></li> <li>3 = <code>Intermittent Speed 1</code></li> <li>4 = <code>Intermittent Speed 2</code></li> <li>5 = <code>Intermittent Speed 3</code></li> <li>6 = <code>Intermittent Speed 4</code></li> <li>7 = <code>Intermittent Speed 5</code></li> <li>8 = <code>Intermittent Speed 6</code></li> </ul> </li> <li>Bits 4 to 8 - Wiper State<ul> <li>0 = <code>Parked</code></li> <li>1 = <code>Parking</code></li> <li>2 = <code>Slow</code></li> <li>3 = <code>Fast</code></li> <li>4 = <code>Intermittent Pause</code></li> <li>5 = <code>Intermittent On</code></li> <li>6 = <code>Wash</code></li> <li>7 = <code>Swipe</code></li> </ul> </li> </ul> </li> <li><code>FIO</code> - Flasher Inputs/Outputs<ul> <li>Bit 0 - Out 1</li> <li>Bit 1 - Out 2</li> <li>Bit 2 - Out 3</li> <li>Bit 3 - Out 4</li> <li>Bit 4 - Input 1</li> <li>Bit 5 - Input 2</li> <li>Bit 6 - Input 3</li> <li>Bit 7 - Input 4</li> </ul> </li> </ul> </li> <li>Base ID + 4<ul> <li><code>OR1</code> to <code>OR8</code> - Output n Reset Count</li> </ul> </li> <li>Base ID + 5<ul> <li><code>CI</code> - CAN Input Results<ul> <li>Byte 0 - Inputs 1 to 8</li> <li>Byte 1 - Inputs 9 to 16</li> <li>Byte 2 - Inputs 17 to 24</li> <li>Byte 3 - Inputs 25 to 32</li> </ul> </li> <li><code>VI</code> - Virtual Input Results<ul> <li>Byte 4 - Inputs 1 to 8</li> <li>Byte 5 - Inputs 9 to 16</li> </ul> </li> </ul> </li> </ul>"},{"location":"firmware/can/#settings","title":"Settings","text":"<p>To change configuration settings on the PDM, settings messages must be sent over CAN (or USB). </p> <p>These settings messages have an uppercase letter prefix that is sent in the first byte of the message. </p> <p>They must also be sent with a special CAN message ID, Base ID - 1</p> <p>Warning</p> <p>Only messages with the ID = Base ID - 1 will be evaluated for settings changes</p> <p>For every valid settings message, a response message will be sent back. </p> <p>The response message will have a lowercase letter prefix and will respond on ID = Base ID + 30</p>"},{"location":"firmware/can/#can","title":"CAN","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 1 C Set 5 C SPE IDH IDL TXR Response 5 c SPE IDH IDL TXR <ul> <li><code>SPE</code><ul> <li>Bit 0 = CAN enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 1 = CAN transmit enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 4 to 7 = CAN speed<ul> <li>0 = <code>1000K</code></li> <li>1 = <code>500K</code></li> <li>2 = <code>250K</code></li> </ul> </li> </ul> </li> <li><code>IDH</code> - Base ID high byte</li> <li><code>IDL</code> - Base ID low byte</li> <li><code>TXR</code> - Transmit rate, delay between transmit (ms / 10)</li> </ul>"},{"location":"firmware/can/#can-input","title":"CAN Input","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 N NUM Set 7 N OME NUM IDH IDL BYT MSK Response 7 n OME NUM IDH IDL BYT MSK <ul> <li><code>OME</code><ul> <li>Bit 0 = Input enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 1 to Bit 2 = Mode<ul> <li>0 = <code>Num</code></li> <li>1 = <code>Momentary</code></li> <li>2 = <code>Latching</code></li> </ul> </li> <li>Bit 4 to 7 = Operator<ul> <li>0 = <code>Equal</code></li> <li>1 = <code>Greater Than</code></li> <li>2 = <code>Less Than</code></li> <li>3 = <code>Bitwise And</code></li> <li>4 = <code>Bitwise Nand</code></li> </ul> </li> </ul> </li> <li><code>NUM</code> - Input number</li> <li><code>IDH</code> - CAN ID high byte</li> <li><code>IDL</code> - CAN ID low byte</li> <li><code>BYT</code><ul> <li>Bit 0 to 4 = Low byte</li> <li>Bit 5 to 7 = High byte</li> </ul> </li> <li><code>MSK</code> - Mask</li> </ul>"},{"location":"firmware/can/#input_1","title":"Input","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 I NUM Set 4 I INS DBT PUL Response 4 i INS DBT PUL <ul> <li><code>NUM</code> - Input number</li> <li><code>INS</code><ul> <li>Bit 0 = Input enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 1-2 = Mode<ul> <li>0 = <code>Num</code></li> <li>1 = <code>Momentary</code></li> <li>2 = <code>Latching</code></li> </ul> </li> <li>Bit 3 = Invert input logic</li> <li>Bit 4-7 = Input number</li> </ul> </li> <li><code>DBT</code> - Debounce time (ms / 10)</li> <li><code>PUL</code> - Pullup/pulldown<ul> <li>0 = <code>No pull</code></li> <li>1 = <code>Pullup</code></li> <li>2 = <code>Pulldown</code></li> </ul> </li> </ul>"},{"location":"firmware/can/#output_1","title":"Output","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 O NUM Set 8 O NUM IN CL RES RT INL INT Response 8 o NUM IN CL RES RT INL INT <ul> <li><code>NUM</code><ul> <li>Bit 0 = Output enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 4-7 = Output number</li> </ul> </li> <li><code>IN</code> - Input number (see Variable Map)</li> <li><code>CL</code> - Current limit (A)</li> <li><code>RES</code><ul> <li>Bit 0-3 = Reset Mode<ul> <li>0 = <code>None</code></li> <li>1 = <code>Count</code></li> <li>2 = <code>Endless</code></li> </ul> </li> <li>Bit 4-7 = Reset Count Limit</li> </ul> </li> <li><code>RT</code> - Reset time (ms / 10)</li> <li><code>INL</code> - Inrush limit (A)</li> <li><code>INT</code> - Inrush time (ms / 10)</li> </ul>"},{"location":"firmware/can/#virtual-input","title":"Virtual Input","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 U NUM Set 7 U NOT NUM VR0 VR1 VR2 MDC Response 7 u NOT NUM VR0 VR1 VR2 MDC <ul> <li><code>NUM</code> - Virtual input number</li> <li><code>NOT</code><ul> <li>Bit 0 = Virtual input enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 1 = Not variable 0<ul> <li>0 = <code>No invert</code></li> <li>1 = <code>Invert</code></li> </ul> </li> <li>Bit 2 = Not variable 1</li> <li>Bit 3 = Not variable 2</li> </ul> </li> <li><code>VR0</code> - Variable 0 (see Variable Map)</li> <li><code>VR1</code> - Variable 1 (see Variable Map)</li> <li><code>VR2</code> - Variable 2 (see Variable Map)</li> <li><code>MDC</code><ul> <li>Bit 0-1 = Condition 0<ul> <li>0 = <code>And</code></li> <li>1 = <code>Or</code></li> <li>2 = <code>Nor</code></li> </ul> </li> <li>Bit 2-3 = Condition 1</li> <li>Bit 6-7 = Mode<ul> <li>0 = <code>Num</code></li> <li>1 = <code>Momentary</code></li> <li>2 = <code>Latching</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"firmware/can/#flasher","title":"Flasher","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 2 H NUM Set 6 H NUM IN ON OFF Response 6 h NUM IN ON OFF <ul> <li><code>NUM</code><ul> <li>Bit 0 = Flasher enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 1 = Single/continous flash</li> <li>Bit 4-7 = Flasher number</li> </ul> </li> <li><code>IN</code> - Flasher input (see Variable Map)</li> <li><code>ON</code> - Flash on time (ms / 10)</li> <li><code>OFF</code> - Flash off time (ms / 10)</li> </ul>"},{"location":"firmware/can/#wiper","title":"Wiper","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 1 W Set 8 W CLM SIN FIN IIN OIN PIN WIN Response 8 w CLM SIN FIN IIN OIN PIN WIN <ul> <li><code>CLM</code><ul> <li>Bit 0 = Wiper enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> <li>Bit 1-2 = Mode<ul> <li>0 = <code>Dig</code> Digital inputs for speed<ul> <li>Must use at least <code>Slow</code> and <code>Park</code> inputs</li> <li><code>Fast</code> and <code>Intermittent</code> inputs optional</li> </ul> </li> <li>1 = <code>Int</code> Integer speed input to select slow/fast/intermittent/park. Digital input for park<ul> <li>One speed input value must be park (<code>0</code>)</li> <li>Must use <code>Speed</code> and <code>Park</code> inputs</li> <li>Use case: Rotary switch to select wiper on/speed</li> </ul> </li> <li>2 = <code>Mix</code> Integer input for slow/fast/intermittent. Digital inputs for on and park<ul> <li>Must use <code>Speed</code>, <code>On</code> and <code>Park</code> input</li> <li>Use case: Rotary switch to select speed, latching button to turn wipers on/off</li> </ul> </li> </ul> </li> <li>Bit 3 = Park level<ul> <li>0 = Stop when input is low</li> <li>1 = Stop when input is high</li> </ul> </li> <li>Bit 4-7 = Wash cycles count, number of swipes after wash</li> </ul> </li> <li><code>SIN</code> - Slow speed input (see Variable Map)</li> <li><code>FIN</code> - Fast speed input (see Variable Map)</li> <li><code>IIN</code> - Intermittent speed input (see Variable Map)</li> <li><code>OIN</code> - On input (see Variable Map)</li> <li><code>PIN</code> - Park input (see Variable Map)</li> <li><code>WIN</code> - Wash input (see Variable Map)</li> </ul> <p>Bug</p> <p><code>Mode</code> = <code>Dig</code> is the only mode that is currently supported.  </p>"},{"location":"firmware/can/#wiper-speed","title":"Wiper Speed","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 1 P Set 7 P SWI SPI S01 S23 S45 S67 Response 7 p SWI SPI S01 S23 S45 S67 <ul> <li><code>SWI</code> - Swipe input (see Variable Map)</li> <li><code>SPI</code> - Speed integer input (see Variable Map)</li> <li><code>S01</code><ul> <li>Bit 0-3 = Speed map 0</li> <li>Bit 4-7 = Speed map 1 </li> </ul> </li> <li><code>S23</code><ul> <li>Bit 0-3 = Speed map 2</li> <li>Bit 4-7 = Speed map 3</li> </ul> </li> <li><code>S45</code><ul> <li>Bit 0-3 = Speed map 4</li> <li>Bit 4-7 = Speed map 5</li> </ul> </li> <li><code>S67</code><ul> <li>Bit 0-3 = Speed map 6</li> <li>Bit 4-7 = Speed map 7</li> </ul> </li> <li>Speed map values are used when <code>Mode</code> is set to <code>Int</code> or <code>Mix</code></li> <li>The values of the speed map correspond to different speeds/states when the <code>Speed</code> input has that value<ul> <li>0 = <code>Park</code></li> <li>1 = <code>Slow</code></li> <li>2 = <code>Fast</code></li> <li>3 = <code>Intermittent 0</code></li> <li>4 = <code>Intermittent 1</code></li> <li>5 = <code>Intermittent 2</code></li> <li>6 = <code>Intermittent 3</code></li> <li>7 = <code>Intermittent 4</code></li> <li>8 = <code>Intermittent 5</code></li> </ul> </li> </ul>"},{"location":"firmware/can/#wiper-delay","title":"Wiper Delay","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 1 Y Set 7 Y IT0 IT1 IT2 IT3 IT4 IT5 Response 7 y IT0 IT1 IT2 IT3 IT4 IT5 <ul> <li><code>ITn</code> - Wiper intermittent time (ms / 100)</li> </ul>"},{"location":"firmware/can/#starter-disable","title":"Starter Disable","text":"Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 1 D Set 4 D EN IN OUT Response 4 d EN IN OUT <ul> <li><code>EN</code><ul> <li>Bit 0 = Starter disable enable/disable<ul> <li>0 = <code>Disable</code></li> <li>1 = <code>Enable</code></li> </ul> </li> </ul> </li> <li><code>IN</code> - Starter disable input (see Variable Map)</li> <li><code>OUT</code> - Starter disable outputs<ul> <li>Bit 0 = Output 1</li> <li>Bit n = Output n+1</li> <li>Bit 7 = Output 8</li> </ul> </li> </ul>"},{"location":"firmware/can/#special","title":"Special","text":"<p>There are some special messages that are used for special functions. </p>"},{"location":"firmware/can/#burn","title":"Burn","text":"<p>The burn message triggers the PDM to save the configuration to FRAM memory. </p> <p>Without this message, any settings change will be lost on a power cycle</p> <p>A response will be sent with the result of the Burn</p> Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 4 B 1 3 8 Response 2 b OK <p>Tip</p> <p>This is an easy way to test new settings. Try new settings without Burn and then cycle power to restore the old settings</p>"},{"location":"firmware/can/#sleep","title":"Sleep","text":"<p>The sleep message triggers the PDM to immediately go to sleep. </p> Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 4 Q U I T Response 2 q OK <p>Note</p> <p>This message will not have an effect if the sleep conditions are not met, see Sleep</p>"},{"location":"firmware/can/#wake-up","title":"Wake Up","text":"<p>This message triggers the PDM to wake up from sleep.</p> <p>There is no response to this message.</p> <p>Tip</p> <p>The format of this message is not critical, any CAN message will wake the PDM</p>"},{"location":"firmware/can/#version","title":"Version","text":"<p>This message gets the firmware version</p> Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Get 1 V Response 5 v MA MI BH BL <ul> <li><code>MA</code> - Major</li> <li><code>MI</code> - Minor</li> <li><code>BH</code> - Build High Byte</li> <li><code>BL</code> - Build Low Byte</li> </ul>"},{"location":"firmware/can/#bootloader","title":"Bootloader","text":"<p>This message jumps to the bootloader for firmware updating | Type   | DLC | Byte 0 | Byte 1 | Byte 2 | Byte 3 | Byte 4 | Byte 5 | Byte 6 | Byte 7| |:------:|:---:|:------:|:------:|:------:|:------:|:------:|:------:|:------:|:-----:| |Get     | 4   | ~      | B      | O      | O      | T      | L      |        |       | |Response| 2   | `      | OK     |        |        |        |        |        |       |</p>"},{"location":"firmware/can/#messages","title":"Messages","text":"<p>Periodically, the device will send info, warning or error messages to facilitate debugging. </p> <p>These messages will have the format below. </p> <p>The first byte is a message type, the second is the ID number and 3rd-5th are extra integer parameters that are added to some messages. </p> Type DLC Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Info 5 F SRC N1 N2 N3 Warning 5 R SRC N1 N2 N3 Error 5 E SRC N1 N2 N3 <ul> <li><code>SRC</code> - Source, see table below</li> <li><code>N1</code> - Integer parameter</li> <li><code>N2</code> - Integer parameter</li> <li><code>N3</code> - Integer parameter</li> </ul>"},{"location":"firmware/can/#errors","title":"Errors","text":"<p>Errors messages are sent when a non-recoverable issue occurs.</p> <p>The only way to reset is to cycle power on the device. </p> <p><code>N1</code> will contain the error number. </p>"},{"location":"firmware/can/#source","title":"Source","text":"SRC Num Description Parameter 1 Parameter 2 Parameter 3 Description 1 State Power On Device is in it's initial state 2 State Starting Initializing peripherals 3 State Run Normal operating state 4 State Over Temp Temp (C*10) Board temp &gt; Max, outputs off 5 State Error Fatal error, power cycle 6 State Sleep Low power sleep, no activity 7 State Wake Wake from low power sleep 8 Overcurrent Output Num Current (A*10) Overcurrent on output 9 Battery Voltage Volts (V*10) Battery voltage under/over 10 CAN CAN warning or error 11 USB USB warning or error 12 Over Temperature Temp (C*10) Board temp warning or error 13 Configuration Device config init error 14 FRAM FRAM init error 15 ADC ADC DMA init error 16 I2C I2C init error 17 Temperature Sensor Temperature sensor init error 18 USB Connected USB cable connection detected"},{"location":"firmware/design/","title":"Design","text":""},{"location":"firmware/design/#device-state","title":"Device State","text":"<pre><code>stateDiagram\n    [*] --&gt; PowerOn\n    PowerOn --&gt; Starting\n    Starting --&gt; Run : Init Complete\n    Run --&gt; OverTemp : Temp &gt; Max\n    OverTemp --&gt; Run : Temp &lt; Max\n    Run --&gt; Sleep : Timeout\n    Sleep --&gt; Wake : Activity\n    Wake --&gt; Run\n    Run --&gt; Error : Error\n    OverTemp --&gt; Error : Temp &gt; Critical\n    Error --&gt; [*]</code></pre>"},{"location":"firmware/errors/","title":"Errors","text":""},{"location":"firmware/errors/#error-state","title":"Error State","text":"<p>The device will enter an error state when a non-recoverable issue occurs.</p> <p>A message will be sent over CAN and/or USB and the Error LED will flash the error number. </p> <p>Warning</p> <p>The only way to reset from an error is to cycle power on the device. </p>"},{"location":"firmware/errors/#error-numbers","title":"Error Numbers","text":"Error # Description 1 Watchdog 2 Message Queue 3 Task 4 Configuration 5 FRAM 6 ADC 7 Temperature Sensor 8 USB 9 CAN 10 CRC 11 I2C 12 RCC 13 Temperature"},{"location":"firmware/introduction/","title":"Introduction","text":""},{"location":"firmware/introduction/#firmware-download","title":"Firmware Download","text":"<p>The latest version can be downloaded here: DingoPDM_FW</p>"},{"location":"firmware/introduction/#firmware-update","title":"Firmware Update","text":"<p>See Updating for firmware updating instructions</p>"},{"location":"firmware/leds/","title":"LEDs","text":""},{"location":"firmware/leds/#v-power","title":"<code>V</code> - Power","text":"<p>The Power LED, <code>V</code> on the case, indicates that the 3.3V power is on. </p> <p>Tip</p> <p>To reduce power consumption, this LED can be disabled by cutting a jumper on the PCB.</p> <p>To restore the LED, the jumper can be bridged with solder. </p>"},{"location":"firmware/leds/#s-status","title":"<code>S</code> - Status","text":"<p>The Status LED, 'S' on the case, is used to indicate the status of the device. </p>"},{"location":"firmware/leds/#e-error","title":"<code>E</code> - Error","text":"<p>The Error LED, 'E' on the case, is used to indicate an error on the device. </p> <p>See Error State for more information. </p>"},{"location":"firmware/leds/#states","title":"States","text":"<ul> <li> : LED Off</li> <li> or  : LED On</li> <li>  or   : LED Blinking</li> <li>  : LED Blinking Code</li> </ul> V S E Description Power off or power not ok. Check power input Device sleep Device operating properly Output overcurrent detected Output overcurrent count limit reached Device overtemp reached, all outputs off Blink error number, see Error State"},{"location":"firmware/sleep/","title":"Sleep","text":"<p>Sleep state will be be entered when these conditions are met:</p> <ul> <li>No USB connected</li> <li>No CAN traffic for 30 seconds</li> <li>No outputs on for 30 seconds</li> </ul> <p>Sleep state can be exited by one of these Wake inputs:</p> <ul> <li>Any CAN traffic</li> <li>Digital Input changing state</li> </ul> <p>Tip</p> <p>To further reduce power consumption, the power LED can be disabled by cutting the solder bridge near the LED</p> <p>v7.2 Hardware</p> <p>v7.2 hardware does not have the power LED solder bridge or CAN disable pin connected.</p> <p>To further reduce consumption, the LED or resistor must be de-soldered. </p> <p>A jumper wire can be added between E3 test pad and the CAN transceiver pin 8 (Rs)</p> <p>Test results</p> <ul> <li> : Enabled</li> <li> : Disabled</li> <li> : Requires modification</li> </ul> State LED CAN Transceiver Current (@12V) v7.2 HW Run (no outputs) 40-50mA Run (no outputs) 35-45mA Sleep 17mA Sleep 13mA Sleep 8mA Sleep 6mA"},{"location":"firmware/updating/","title":"Updating","text":"<p>dingoPDM firmware can be updated using the onboard USB-C connection. </p>"},{"location":"firmware/updating/#stm32cubeprogrammer","title":"STM32CubeProgrammer","text":"<p>To update the firmware, the STMicroelectronics STM32CubeProgrammer is used. </p> <p>This software can be downloaded here: STM32CubeProgrammer</p>"},{"location":"firmware/updating/#entering-bootloader","title":"Entering Bootloader","text":"<p>To update the firmware, the device must be put into the bootloader. </p> <p>This can be done using one of these methods:</p> <ul> <li>Remove the case and move the boot switch to the bootloader position</li> <li>Use DingoConfigurator FwUpdate button to jump the device to the bootloader</li> </ul>"},{"location":"firmware/updating/#boot-switch","title":"Boot Switch","text":"<p>To update the firmware, the device must be put into bootloader</p> <p>One option is using the <code>boot</code> switch on the PCB. </p> <p>Note</p> <p>The case must be removed to access the boot switch.</p> <ul> <li>Remove the DT connector and any wires going to the power/ground connections</li> <li>Remove the 2x Philips screws next to the DT connector</li> <li>Remove the 4x M6 screws around the perimeter of the device</li> <li>Slide/wiggle the case up and off the device</li> </ul> <p>To enter the bootloader, move the slide switch to the position that aligns it with the lines on the switch body</p> <p> </p> <p>Warning</p> <p>After updating, remember to set the boot switch back to the original position</p>"},{"location":"firmware/updating/#fwupdate","title":"FwUpdate","text":"<p>After connecting to the dingoPDM using dingoConfigurator, the <code>FwUpdate</code> button on the toolbar to send the <code>~BOOTL</code> message to put the device into the bootloader.</p> <p>Warning</p> <p>Pressing the <code>FwUpdate</code> button will stop the PDM and drop communication to DingoConfigurator</p>"},{"location":"firmware/updating/#connection","title":"Connection","text":"<p>Connect a USB-C to USB-A cable to the PC. </p> <p>Note</p> <p>V7.2 PCBs do not support USB-C to USB-C cables, a USB-C to USB-A cable must be used</p> <p>Note</p> <p>12V power is not required to perform the firmware update, the device will be powered by the USB cable</p> <p>To verify that the device has entered the bootloader:</p> <ul> <li>Open the Windows <code>Device Manager</code></li> <li>Expand <code>Universal Serial Bus devices</code></li> <li>The <code>STM32 BOOTLOADER</code> should be listed</li> <li></li> </ul>"},{"location":"firmware/updating/#applying-update","title":"Applying Update","text":"<ul> <li>Install <code>STM32CubeProgrammer</code></li> <li>Open <code>STM32CubeProgrammer</code></li> <li>Change connection type to <code>USB</code></li> <li> <p>Press the refresh button to update the port</p> </li> <li> <p></p> </li> <li> <p>Press the <code>Connect</code> button, after successful connection the <code>Target Information</code> should be updated</p> </li> <li></li> <li>Select the second icon on the left, <code>Erasing &amp; Programming</code></li> <li></li> <li>Press <code>Browse</code> and select the new firmware .hex file</li> <li>Verify <code>Skip flash erase before programming</code> is unchecked</li> <li>Verify <code>Verify programming</code> and <code>Run after programming</code> are checked</li> <li>Press <code>Start Programming</code></li> <li>After successful programming, the device will disconnect</li> <li>You should also receive pop-ups verifying successful programming</li> <li></li> </ul>"},{"location":"firmware/updating/#success","title":"Success","text":"<p>Congrats! You successfuly updated the dingoPDM firmware. </p> <p>The firmware version can be verified using DingoConfigurator</p> <p>Warning</p> <p>Don't forget to set the boot switch back to the original position!</p> <p>Danger</p> <p>A POWER CYCLE IS REQUIRED any time the boot switch is changed</p>"},{"location":"firmware/variablemap/","title":"Variable Mapping","text":"<p>To enable software configuration a Variable Map is maintained on the device. </p> <p>Each variable of the variable map corresponds to the result of another item. </p> <p>These are used to:</p> <ul> <li>Control the output on/off</li> <li>Create logic with the Virtual Inputs</li> <li>Control wipers</li> <li>Turn flashers on/off</li> <li>Engage the starter disable</li> </ul> <p>Warning</p> <p>The Variable Map is subject to change as new functions/features are added. </p> <p>New values will always be added to the end of the map. </p> Index Variable 0 None 1 Digital In 1 2 Digital In 2 3 CAN In 1 4 CAN In 2 5 CAN In 3 6 CAN In 4 7 CAN In 5 8 CAN In 6 9 CAN In 7 10 CAN In 8 11 CAN In 9 12 CAN In 10 13 CAN In 11 14 CAN In 12 15 CAN In 13 16 CAN In 14 17 CAN In 15 18 CAN In 16 19 CAN In 17 20 CAN In 18 21 CAN In 19 22 CAN In 20 23 CAN In 21 24 CAN In 22 25 CAN In 23 26 CAN In 24 27 CAN In 25 28 CAN In 26 29 CAN In 27 30 CAN In 28 31 CAN In 29 32 CAN In 30 33 CAN In 31 34 CAN In 32 35 Virtual In 1 36 Virtual In 2 37 Virtual In 3 38 Virtual In 4 39 Virtual In 5 40 Virtual In 6 41 Virtual In 7 42 Virtual In 8 43 Virtual In 9 44 Virtual In 10 45 Virtual In 11 46 Virtual In 12 47 Virtual In 13 48 Virtual In 14 49 Virtual In 15 50 Virtual In 16 51 Output 1 52 Output 2 53 Output 3 54 Output 4 55 Output 5 56 Output 6 57 Output 7 58 Output 8 59 Wiper Slow Out 60 Wiper Fast Out 61 Flasher 1 62 Flasher 2 63 Flasher 3 64 Flasher 4 65 Always On"},{"location":"gettingstarted/introduction/","title":"Introduction","text":""},{"location":"gettingstarted/introduction/#resources","title":"Resources","text":""},{"location":"gettingstarted/introduction/#github","title":"GitHub","text":"<p>dingoPDM is split between 3 GitHub repos.</p> <p>The latest releases can be found on the Releases page for each repo:</p> <ul> <li>Hardware: dingoPDM</li> <li>Firmware: dingoPDM_FW</li> <li>Software: DingoConfigurator</li> </ul> <p>dingoPDM-Max is split between 2 GitHub repos. </p> <p>The latest releases can be found on the Releases page for each repo:</p> <ul> <li>Hardware: dingoPDM-Max</li> <li>Firmware: dingoPDM-Max_FW</li> </ul> <p>Note</p> <p>dingoPDM will ship with the latest firmware release installed at the time of shipping, but new firmware is released frequently. </p> <p>Check the Releases page for a new release when receiving the dingoPDM and follow the Firwmare Updating instructions. </p>"},{"location":"gettingstarted/introduction/#store","title":"Store","text":"<p>Dingo Electronics Store</p>"},{"location":"gettingstarted/introduction/#discord","title":"Discord","text":"<p>See invite link at the bottom right of the page</p> <p>Note</p> <p>If the link is expired, send a message on the store page </p>"},{"location":"gettingstarted/introduction/#test-config-file","title":"Test Config File","text":"<p>When first powering on dingoPDM, whether one received from the store or built yourself, the included test file can be used to verify functionality. </p> <p>The test file includes a very basic setup:</p> <ul> <li>All outputs:<ul> <li>Enabled</li> <li>Set to turn on with input 1</li> <li>Set to their max current limit with endless reset</li> </ul> </li> <li>Input 1 set to: <ul> <li>Pullup</li> <li>Invert</li> <li>Momentary</li> </ul> </li> </ul> <p>Connect input 1 to ground to turn all outputs on. </p>"},{"location":"gettingstarted/introduction/#changing-can-id","title":"Changing CAN ID","text":"<p>The CAN Base ID default value is 2000. </p> <p>To change this, modify the value in the DeviceTree and press <code>Update</code> and then <code>Burn</code> to save the setting. </p> <p>On the next power up, the CAN Base ID will be updated. </p>"},{"location":"gettingstarted/introduction/#goals","title":"Goals","text":"<ul> <li> Learn more about PDMs and high DC current devices</li> <li> Learn about developing firmware for a more complex STM32 based project</li> <li> Create a low cost device that my friends and I can use in our project cars</li> <li> Layout the board to fit simple case designs<ul> <li> 3D printed top shell and flat aluminum heatsinks (no machining)</li> </ul> </li> <li> Use low cost 1oz/0.5oz 4 layer PCBs (low cost 2oz/1oz now available from JLCPCB)</li> <li> Share my work with others for reference, inspiration or collaboration. </li> <li> Document the project in a professional way to make it easy to use and access</li> <li> Develop an easy to use configuration PC software</li> <li> Offer fully built devices for sale</li> </ul> <p>Info</p> <p>If this project does help you in any way, I'd appreciate a message!</p>"},{"location":"gettingstarted/introduction/#project-status","title":"Project Status","text":"<ul> <li> : Complete</li> <li> : In Progess</li> <li> : Not Started</li> </ul> Recent Open Items Status Finish case design Test thermal performance Support USB C to C cables Develop dingoPDM-Max Finish documentation Add device sleep Add verbose error handling Add keypad support Add PWM output support Switch-less bootloader Build software installer Add auto-updating Add soft HMI buttons Add I/O plotting"},{"location":"gettingstarted/introduction/#disclaimer","title":"Disclaimer","text":"<p>Warning</p> <p>Please note that this product has been designed by a hobbyist, not a professional.  It is intended for off-road and testing use only.  Users should operate the product at their own discretion and risk.  The designer explicitly disclaims any responsibility for damage or injury that may result from the use of this product.</p>"},{"location":"hardware/case/","title":"Case","text":"<p>The mechanical design is centered around simple designs that can be created in a home shop. </p> <ul> <li>3D Printed Case</li> <li>Flat aluminum heatsink plate</li> <li>Flat aluminum baseplate</li> <li>The heatsink is designed to be 2 pieces. A heatsink plate and a baseplate<ul> <li>The heatsink plate provides clearance for the THT pins of the Deutsch connectors and the RedCube terminal while getting as close to the Profets as possible</li> <li> <p>Warning</p> The heatsink plate should be covered on both sides with a thermal pad material to electricaly isolate the heatsink while still providing a thermal interface (Example: 3M 5583S) </li> <li>The baseplate holds the case and also sandwiches the spacer plate to the PCB</li> </ul> </li> </ul>"},{"location":"hardware/case/#exploded-assembly","title":"Exploded Assembly","text":"ID Description Details Qty 1 Baseplate <code>Aluminum 6061</code> 1 2 Heatsink <code>Aluminum 6061</code> 1 3 Case <code>3D Print</code> 1 4.1 PCB 1 5.1 Ring Lug <code>M6</code> or <code>1/4\"</code> 1 5.2 Lug Washers <code>M6 Flat</code> 2 5.3 Lug Screws <code>M6x1.0x14mm</code> 2 5.5 Case Washers <code>M6 Flat</code> 4 5.6 Case Screws <code>M6x1.0x14mm</code> 4 5.7 PCB Washers <code>M3 Flat</code> 4 5.8 PCB Screws <code>M3x0.5x12mm</code> 4 6 DT Connector <code>12 Pin</code> 1 10.1 Light Pipe <code>PLPC2-10MM</code> 3 13 Connector Screws <code>No. 6, 5/8\" Thread Forming</code> 2"},{"location":"hardware/case/#stress-testing","title":"Stress Testing","text":"<p>Stress tests were conducted with a dummy load at 70A total.</p> <p>The device was mounted horizontaly (worst case).</p> <p>Ambient temperature in the mid 60s F</p> <p></p>"},{"location":"hardware/case/#models","title":"Models","text":"<p>Models of the baseplate, heatsink and case can be found here:</p> <p>Case STEP Files</p> <p>Complete STEP File (DingoPDM_V7_2.step)</p>"},{"location":"hardware/connections/","title":"Connections","text":""},{"location":"hardware/connections/#connectors","title":"Connectors","text":"ID Connector Details Qty Note 1 DT 12 Pos Connector <code>DT06-12SA</code> 1 DT 12 Wedgelock <code>W12S</code> 1 14-16AWG Socket <code>0462-209-16141</code> 2 16-20AWG Socket <code>0462-201-16141</code> 10 2 12V DC Power Lug <code>M6</code> or <code>1/4\"</code> lug 1 Large gauge wire required (4 to 10AWG) 3 Ground Lug <code>M6</code> or <code>1/4\"</code> lug 1 Small gauge wire can be used (18 to 20 AWG) 4 USB Type C 1 USB C-C cables are not supported with v7.2 hardware"},{"location":"hardware/connections/#usb","title":"USB","text":"<p>Warning</p> <p>USB C-C cables are not supported with v7.2 hardware</p> Hardware USB C-C USB A-C v7.2 v7.3 and up"},{"location":"hardware/connections/#pinout","title":"Pinout","text":""},{"location":"hardware/connections/#dingopdm","title":"dingoPDM","text":"Pin Function Current 1 CAN L 2 CAN H 3 Output 8 8A 4 Output 7 8A 5 Output 6 8A 6 Output 5 8A 7 Output 1 13A 8 Input 1 9 Output 4 8A 10 Output 3 8A 11 Input 2 12 Output 2 13A <p>Note</p> <p>The current outputs are estimates and based on the maximum current rated by Deutsch. The possible current may be higher depending on the installation and configuration. </p> <p>Note</p> <p>No internal terminating resistor on CAN connection, must be added externally    </p>"},{"location":"hardware/connections/#dingopdm-max","title":"dingoPDM-Max","text":"Pin Function Current 1 Output 4 26A 2 Output 4 26A 3 CAN L 4 CAN H 5 Output 3 26A 6 Output 3 26A 7 Output 1 26A 8 Output 1 26A 9 Input 1 10 Input 2 11 Output 2 26A 12 Output 2 26A <p>Note</p> <p>The current outputs are estimates and based on the maximum current rated by Deutsch. The possible current may be higher depending on the installation and configuration. </p> <p>Note</p> <p>No internal terminating resistor on CAN connection, must be added externally</p>"},{"location":"hardware/connections/#test-points","title":"Test Points","text":"Label Function MCU Pin I2C I2C1 Clock <code>PB6</code> I2D I2C1 Data <code>PB7</code> CR CAN Receive <code>PB8</code> CT CAN Transmit <code>PB9</code> E1 Extra 1 <code>PC10</code> E2 Extra 2 <code>PC11</code> E3 Extra 3 <code>PC13</code> GND Ground <code>Ground</code> TagConnect Debugger"},{"location":"hardware/connections/#wipers","title":"Wipers","text":"<p>To control a wiper motor directly from dingoPDM a WiperModule is required.  The WiperModule uses 3 relays to properly control the slow, fast and brake functions of a wiper motor.  The internal connections are made based on the slow input (which also supplies all power to the motor) and the fast input.  The ground and park signals are passed through the module. </p> <p>Information about the WiperModule can be found here: WiperModule</p> <p> </p>"},{"location":"hardware/pcb/","title":"Introduction","text":"<p>There are two versions of dingoPDM, standard and Max. </p> <p>dingoPDM = 8 outputs (shown above, low and medium current)</p> <p>dingoPDM-Max = 4 outputs (high current)</p>"},{"location":"hardware/pcb/#components","title":"Components","text":"<p>dingoPDM</p> <ul> <li>2x Profet <code>BTS7002-1EPP</code><ul> <li>2x 14A outputs </li> <li>With flyback diodes</li> </ul> </li> <li>3x Profet <code>BTS7008-2EPA</code><ul> <li>6x 8A outputs</li> </ul> </li> <li>2x Digital Inputs<ul> <li>Selectable pullup/pulldown</li> </ul> </li> <li><code>STM32F446RET6</code> Microcontroller</li> <li>256Kbit <code>FRAM</code><ul> <li>Settings storage</li> </ul> </li> <li>CAN transceiver<ul> <li>No terminating resistor</li> </ul> </li> <li>Board temperature measured using <code>MCP9808</code></li> <li>2x LEDs for power and temperature status</li> <li>2x LEDs for status</li> <li>Onboard 12V to 5V to 3.3V regulation</li> <li>2x M6 lug 12V power connection<ul> <li>Ground connection not used for output power, can be a small gauge (ex: 18AWG or 20AWG)</li> </ul> </li> <li>12V voltage measurement</li> <li>THT test pads for easy connection of logic analyzer (ex: Saleae leads)</li> <li>Deutsch <code>DT 12 pin</code> connector</li> </ul> <p>dingoPDM-Max (only differences listed)</p> <ul> <li>4x Profet <code>BTS70012-1ESP</code><ul> <li>4x 26A outputs </li> <li>With flyback diodes</li> </ul> </li> </ul>"},{"location":"hardware/pcb/#kicad","title":"KiCad","text":"<ul> <li>Designed using <code>KiCad v8.0.4</code></li> </ul>"},{"location":"hardware/pcb/#design-notes","title":"Design Notes","text":"<ul> <li>Prior to V6, the design had a lot of features which meant a lot of parts</li> <li>To make the board cheaper, easier to source/produce and quicker to test the design was drastically simplified</li> <li>The Deutsch DT connector was selected due to it's popularity, part availability and ease of use</li> <li>BTS724 was used on V6, but removed for V7 due to thermal issues. It wouldn't trip until a very high current. </li> </ul>"},{"location":"hardware/pcb/#mcu-pinouts","title":"MCU Pinouts","text":""},{"location":"hardware/pcb/#dingopdm","title":"dingoPDM","text":"MCU Pin Function Type <code>PA0</code> Output 1 Current Sense (IS) Analog Input <code>PA1</code> Output 5/6 Current Sense (IS) Analog Input <code>PA2</code> Output 7/8 Current Sense (IS) Analog Input <code>PA3</code> Battery Voltage Sense Analog Input <code>PA4</code> Output 8 Control Input (IN) Digital Output <code>PA5</code> Output 7/8 Sense Select (DSEL) Digital Output <code>PA6</code> Output 7/8 Sense Enable (DEN) Digital Output <code>PA7</code> Output 7 Control Input (IN) Digital Output <code>PA8</code> - - <code>PA9</code> USB VBUS Sense Digital Input <code>PA10</code> Input 1 Digital Input <code>PA11</code> USB D- (DM) <code>PA12</code> USB D+ (DP) <code>PA13</code> SWDIO <code>PA14</code> SWCLK <code>PA15</code> - - <code>PB0</code> Output 5/6 Sense Enable (DEN) Digital Output <code>PB1</code> Output 1 Control Input (IN) Digital Output <code>PB2</code> Output 1 Sense Enable (DEN) Digital Output <code>PB3</code> SWO <code>PB4</code> - - <code>PB5</code> - - <code>PB6</code> I2C1 SCL <code>PB7</code> I2C1 SDA <code>PB8</code> CAN RX <code>PB9</code> CAN TX <code>PB10</code> Output 1 Control Input (IN) Digital Output <code>PB12</code> Output 4 Control Input (IN) Digital Output <code>PB13</code> - - <code>PB14</code> Output 3/4 Sense Select (DSEL) Digital Output <code>PB15</code> Output 3/4 Sense Enable (DEN) Digital Output <code>PC0</code> Status LED Digital Output <code>PC1</code> Error LED Digital Output <code>PC2</code> Output 2 Current Sense (IS) Analog Input <code>PC3</code> Output 3/4 Current Sense (IS) Analog Input <code>PC4</code> Output 6 Control Input (IN) Digital Output <code>PC5</code> Output 5/6 Sense Select (DSEL) Digital Output <code>PC6</code> Output 3 Control Input (IN) Digital Output <code>PC7</code> Output 2 Sense Enable (DEN) Digital Output <code>PC8</code> Output 2 Control Input (IN) Digital Output <code>PC9</code> Input 2 Digital Input <code>PC10</code> Extra 1 Undefined <code>PC11</code> Extra 2 Undefined <code>PC12</code> CAN Standby Digital Output <code>PC13</code> Extra 3 Undefined <code>PC14</code> - - <code>PC15</code> - - <code>PD2</code> - - <code>PH0</code> Oscillator <code>PH1</code> Oscillator"},{"location":"hardware/pcb/#dingopdm-max","title":"dingoPDM-Max","text":"MCU Pin Function Type <code>PA0</code> Output 3 Current Sense (IS) Analog Input <code>PA1</code> Output 4 Current Sense (IS) Analog Input <code>PA2</code> - <code>PA3</code> Battery Voltage Sense Analog Input <code>PA4</code> - <code>PA5</code> Output 4 Sense Enable (DEN) Digital Output <code>PA6</code> Output 4 Control Input (IN) Digital Output <code>PA7</code> - <code>PA8</code> - - <code>PA9</code> USB VBUS Sense Digital Input <code>PA10</code> Input 1 Digital Input <code>PA11</code> USB D- (DM) <code>PA12</code> USB D+ (DP) <code>PA13</code> SWDIO <code>PA14</code> SWCLK <code>PA15</code> - - <code>PB0</code> Output 3 Control Input (IN) Digital Output <code>PB1</code> - <code>PB2</code> - <code>PB3</code> SWO <code>PB4</code> - - <code>PB5</code> - - <code>PB6</code> I2C1 SCL <code>PB7</code> I2C1 SDA <code>PB8</code> CAN RX <code>PB9</code> CAN TX <code>PB10</code> - <code>PB12</code> - <code>PB13</code> Output 1 Sense Enable (DEN) Digital Output <code>PB14</code> Output 1 Control Input (IN) Digital Output <code>PB15</code> - <code>PC0</code> Status LED Digital Output <code>PC1</code> Error LED Digital Output <code>PC2</code> Output 2 Current Sense (IS) Analog Input <code>PC3</code> Output 1 Current Sense (IS) Analog Input <code>PC4</code> - Digital Output <code>PC5</code> Output 3 Sense Enable (DEN) Digital Output <code>PC6</code> Output 2 Sense Enable (DEN) Digital Output <code>PC7</code> Output 2 Control Input (IN) Digital Output <code>PC8</code> - <code>PC9</code> Input 2 Digital Input <code>PC10</code> Extra 1 Undefined <code>PC11</code> Extra 2 Undefined <code>PC12</code> CAN Standby Digital Output <code>PC13</code> Extra 3 Undefined <code>PC14</code> - - <code>PC15</code> - - <code>PD2</code> - - <code>PH0</code> Oscillator <code>PH1</code> Oscillator"},{"location":"software/canboard/","title":"CANBoard","text":""},{"location":"software/devicetree/","title":"DeviceTree","text":"<p>The DeviceTree is divided into 2 sections:</p> <ul> <li> <p><code>DeviceTree</code></p> </li> <li> <p><code>Device Management</code></p> </li> </ul>"},{"location":"software/devicetree/#devicetree","title":"DeviceTree","text":""},{"location":"software/devicetree/#icons","title":"Icons","text":"<p>Each device type has a different icon in the DeviceTree. </p> <p>When the device is detected the icon change from gray to green. </p> Device Type Icon dingoPDM CANBoard CANMsgLog <p>Note</p> <p>Devices are considered detected when CAN messages are received in their ID range based on the <code>Base ID</code></p>"},{"location":"software/devicetree/#device-order","title":"Device Order","text":"<p>The order of devices in the DeviceTree is based on the <code>Base ID</code>.</p> <p>The lowest <code>Base ID</code> are shown at the top. </p> <p><code>CANMsgLog</code> always has a <code>Base ID</code> value of <code>9999</code>, making sure it is always at the bottom.</p>"},{"location":"software/devicetree/#device-management","title":"Device Management","text":""},{"location":"software/devicetree/#type","title":"Type","text":"<p>Select the <code>Type</code> of device to add. </p>"},{"location":"software/devicetree/#name","title":"Name","text":"<p>Set or edit the <code>Name</code> of the device in the DeviceTree.</p>"},{"location":"software/devicetree/#base-id","title":"Base ID","text":"<p>Set or edit the <code>Base ID</code> of the device. </p> <p>Info</p> <p>Currently <code>Base ID</code> must be within the 11 bit range of the standard CAN ID (0-2048)</p>"},{"location":"software/devicetree/#add","title":"Add","text":"<p><code>Add</code> a new device to the DeviceTree with the <code>Name</code> and <code>Base ID</code> as set.</p>"},{"location":"software/devicetree/#update","title":"Update","text":"<p><code>Update</code> the <code>Name</code> and/or <code>Base ID</code> values of the selected device in the DeviceTree.</p>"},{"location":"software/devicetree/#remove","title":"Remove","text":"<p><code>Remove</code> the selected device from the DeviceTree. </p>"},{"location":"software/dingopdm/","title":"dingoPDM","text":""},{"location":"software/dingopdm/#settings","title":"Settings","text":""},{"location":"software/dingopdm/#can-input","title":"CAN Input","text":""},{"location":"software/dingopdm/#enable","title":"Enable","text":"<p>The CAN Input is enabled and evaluated in the device.  Setting the unused inputs to not enabled reduces the amount of processing time on the device. </p>"},{"location":"software/dingopdm/#id","title":"ID","text":""},{"location":"software/dingopdm/#low-byte","title":"Low Byte","text":""},{"location":"software/dingopdm/#high-byte","title":"High Byte","text":""},{"location":"software/dingopdm/#operator","title":"Operator","text":""},{"location":"software/dingopdm/#mask","title":"Mask","text":""},{"location":"software/dingopdm/#mode","title":"Mode","text":""},{"location":"software/dingopdm/#examples","title":"Examples","text":""},{"location":"software/dingopdm/#virtual-input","title":"Virtual Input","text":""},{"location":"software/dingopdm/#enable_1","title":"Enable","text":"<p>The Virtual Input is enabled and evaluated in the device.  Setting the unused inputs to not enabled reduces the amount of processing time on the device. </p>"},{"location":"software/dingopdm/#not","title":"Not","text":""},{"location":"software/dingopdm/#variable","title":"Variable","text":""},{"location":"software/dingopdm/#condition","title":"Condition","text":""},{"location":"software/dingopdm/#mode_1","title":"Mode","text":""},{"location":"software/dingopdm/#examples_1","title":"Examples","text":""},{"location":"software/dingopdm/#wipermodule","title":"WiperModule","text":"<p>To control a wiper motor directly from dingoPDM a WiperModule is required.  The WiperModule uses 3 relays to properly control the slow, fast and brake functions of a wiper motor.  The internal connections are made based on the slow input (which also supplies all power to the motor) and the fast input.  The ground and park signals are passed through the module. </p> <p>Information about the WiperModule can be found here: WiperModule</p> <p> </p>"},{"location":"software/dingopdm/#wiper","title":"Wiper","text":""},{"location":"software/dingopdm/#enable_2","title":"Enable","text":"<p>The Wiper is enabled and evaluated in the device.  Setting the unused Wiper to not enabled reduces the amount of processing time on the device. </p>"},{"location":"software/dingopdm/#state","title":"State","text":""},{"location":"software/dingopdm/#speed","title":"Speed","text":""},{"location":"software/dingopdm/#slow","title":"Slow","text":""},{"location":"software/dingopdm/#fast","title":"Fast","text":""},{"location":"software/dingopdm/#mode_2","title":"Mode","text":""},{"location":"software/dingopdm/#slow-in","title":"Slow In","text":""},{"location":"software/dingopdm/#fast-in","title":"Fast in","text":""},{"location":"software/dingopdm/#intermittent-in","title":"Intermittent In","text":""},{"location":"software/dingopdm/#on-in","title":"On In","text":""},{"location":"software/dingopdm/#speed-in","title":"Speed In","text":""},{"location":"software/dingopdm/#park-in","title":"Park In","text":""},{"location":"software/dingopdm/#park-stop-level","title":"Park Stop Level","text":""},{"location":"software/dingopdm/#swipe-in","title":"Swipe In","text":""},{"location":"software/dingopdm/#wash-in","title":"Wash In","text":""},{"location":"software/dingopdm/#washwipe-cycles","title":"Wash/Wipe Cycles","text":""},{"location":"software/dingopdm/#wiper-speed-map","title":"Wiper Speed Map","text":""},{"location":"software/dingopdm/#speed-0-7","title":"Speed 0-7","text":""},{"location":"software/dingopdm/#wiper-intermittent-time","title":"Wiper Intermittent Time","text":""},{"location":"software/dingopdm/#intermittent-time-1-6","title":"Intermittent Time 1- 6","text":""},{"location":"software/dingopdm/#flasher","title":"Flasher","text":""},{"location":"software/dingopdm/#enable_3","title":"Enable","text":"<p>The Flasher is enabled and evaluated in the device.  Setting the unused Flahser to not enabled reduces the amount of processing time on the device. </p>"},{"location":"software/dingopdm/#single","title":"Single","text":""},{"location":"software/dingopdm/#input","title":"Input","text":""},{"location":"software/dingopdm/#output","title":"Output","text":""},{"location":"software/dingopdm/#on-time","title":"On Time","text":""},{"location":"software/dingopdm/#off-time","title":"Off Time","text":""},{"location":"software/dingopdm/#starter-disable","title":"Starter Disable","text":""},{"location":"software/dingopdm/#enable_4","title":"Enable","text":"<p>The Starter Disable is enabled and evaluated in the device.  Setting the unused Starter Disable to not enabled reduces the amount of processing time on the device. </p>"},{"location":"software/dingopdm/#input_1","title":"Input","text":""},{"location":"software/dingopdm/#o1-8","title":"O1-8","text":""},{"location":"software/introduction/","title":"Introduction","text":"<p>DingoConfigurator is a Windows application designed to configure and monitor dingoPDM. </p> <p></p>"},{"location":"software/introduction/#download","title":"Download","text":"<p>The latest version can be downloaded here: DingoConfigurator</p>"},{"location":"software/introduction/#installation","title":"Installation","text":"<p>Info</p> <p>The installer has not been built yet.</p> <p>First install STM32CubeProgrammer </p> <p>Download the <code>.zip</code> from the link above, unzip and run <code>DingoConfigurator.exe</code></p>"},{"location":"software/introduction/#supported-devices","title":"Supported Devices","text":"<p>DingoConfigurator currently supports these devices:</p> Manufacturer Device Dingo Electronics dingoPDM Dingo Electronics CANBoard <p>Note</p> <p>New devices can/will be added when I have access to the hardware </p>"},{"location":"software/introduction/#supported-can-interfaces","title":"Supported CAN Interfaces","text":"<p>DingoConfigurator currently supports these CAN interfaces.</p> Manufacturer Device Dingo Electronics USB2CAN PEAK-System PCAN-USB <p>Note</p> <p>New devices can/will be added when I have access to the hardware </p>"},{"location":"software/introduction/#sections","title":"Sections","text":""},{"location":"software/messagelist/","title":"MessageList","text":""},{"location":"software/msglog/","title":"CANMsgLog","text":""},{"location":"software/toolbar/","title":"ToolBar","text":"<p>The ToolBar is divided into 3 sections:</p> <ul> <li> <p>File Operations</p> </li> <li> <p>Interface Connection</p> </li> <li> <p>Settings Communication</p> </li> </ul> <p>Note</p> <p>The sections of the ToolBar can be rearranged by dragging the sections using the handle on the left of each section</p>"},{"location":"software/toolbar/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"Function Key New Ctrl+N Open Ctrl+O Save Ctrl+S Connect Ctrl+C Disconnect Ctrl+D Read Ctrl+R Write Ctrl+W Burn Ctrl+B"},{"location":"software/toolbar/#file-operations","title":"File Operations","text":"<p>DingoConfigurator uses standard <code>JSON</code> configuration files with the extension <code>.dco</code>. </p> <p>The modified extension enables setting the Windows default app to DingoConfigurator.</p> <p>Warning</p> <p>Do not edit the <code>.dco</code> file outside of DingoConfigurator unless you are familiar with <code>JSON</code>. </p> <p>Errors will make the file unusable with DingoConfigurator. </p>"},{"location":"software/toolbar/#new","title":"New","text":"<p><code>New</code> clears the current configuration.</p> <p>No file is created, just a new clean configuration. </p> <p>After adding new devices, press <code>Save As</code> to save the new <code>.dco</code> file. </p> <p>Warning</p> <p>Save the current configuration before pressing <code>New</code> to prevent losing the current configuration settings</p>"},{"location":"software/toolbar/#open","title":"Open","text":"<p><code>Open</code> launches a file dialog to select a <code>.dco</code> file. </p> <p>The directory will repeat to the same directory as previously used after the first use. </p> <p>Warning</p> <p><code>Open</code> clears the current configuration, <code>Save</code> before pressing <code>Open</code> to prevent losing the current configuration settings</p>"},{"location":"software/toolbar/#save","title":"Save","text":"<p><code>Save</code> saves the <code>.dco</code> file after an <code>Open</code> or <code>Save As</code></p>"},{"location":"software/toolbar/#save-as","title":"Save As","text":"<p><code>Save As</code> saves a new <code>.dco</code> file from a new configuration or saves a copy of an existing configuration</p>"},{"location":"software/toolbar/#interface-connection","title":"Interface Connection","text":""},{"location":"software/toolbar/#interfaces","title":"Interfaces","text":"<p>Select the interface to connect to the devices. </p> <p>Currently supported interfaces:</p> Interface USB2CAN PCAN USB <p>Note</p> <p>USB only allows connection to one device at a time, versus CAN which connects to all devices on the bus</p>"},{"location":"software/toolbar/#port","title":"Port","text":"<p>Select the COM port to use with the selected interface, if required. </p> <p><code>PCAN</code> does not require a COM port, therefore the port selection is disabled when <code>PCAN</code> is selected.</p>"},{"location":"software/toolbar/#refresh","title":"Refresh","text":"<p><code>Refresh</code> updates the <code>Port</code> selection with the current list of available COM ports. </p>"},{"location":"software/toolbar/#baud","title":"Baud","text":"<p>Select the required CAN baud rate. </p> <p><code>USB</code> does not require a baud rate, therefore the baud rate selection is disabled when <code>USB</code> is selected. </p>"},{"location":"software/toolbar/#connect","title":"Connect","text":"<p><code>Connect</code> opens a connection to the interface device.</p> <p>After a successful connection, the StatusBar at the bottom of the window should update with a green box and the name of the interface followed by \"Connected\".</p> <p>The StatusBar will also update with the number of Detected Devices in the bottom right. </p> <p>Tip</p> <p>The Detected Devices count means messages in the range of the configured devices are being received.</p> <p>For each device the count is increased by 1 </p>"},{"location":"software/toolbar/#disconnect","title":"Disconnect","text":"<p><code>Disconnect</code> closes the currently open connection. </p>"},{"location":"software/toolbar/#settings-communication","title":"Settings Communication","text":"<p>The <code>Settings Communication</code> section of the ToolBar enables uploading, downloading and burning the configuration to the currently selected Device. </p> <p>Tip</p> <p>To enable the buttons, select a device in the DeviceTree. </p> <p>Note</p> <p>Some devices do not support settings communication, therefore the buttons are disabled. </p>"},{"location":"software/toolbar/#read","title":"Read","text":"<p><code>Read</code> reads the settings from the selected device and updates the current configuration. </p> <p>Warning</p> <p><code>Read</code> will overwrite the current configuration settings for the selected device</p>"},{"location":"software/toolbar/#write","title":"Write","text":"<p><code>Write</code> sends the current configuration to the selected device. </p>"},{"location":"software/toolbar/#burn","title":"Burn","text":"<p><code>Burn</code> sends a burn command to the selected device. </p> <p>This command tells the device to write the current configuration to non-volatile memory. </p> <p>Danger</p> <p>If a <code>Burn</code> is not performed after a <code>Download</code> the current configuration in the device will be lost on a power cycle</p>"},{"location":"software/toolbar/#sleepwake","title":"Sleep/Wake","text":"<p><code>Sleep</code> sends a sleep command to the selected device. </p> <p>This command immediately sets the device to sleep state. </p> <p><code>Wake</code> sends a wake command to the selected device. </p>"}]}